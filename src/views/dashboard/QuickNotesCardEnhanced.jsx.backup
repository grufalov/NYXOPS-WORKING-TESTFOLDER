import React, { useState, useEffect, useRef } from 'react';
import { StickyNote, Eye, EyeOff, Bold, Italic, Strikethrough, Code, List, ListOrdered, Heading, Save, Maximize2, Minimize2, Type, Palette } from 'lucide-react';
import { supabase } from '../../supabaseClient.js';
import { errorBus } from '../../utils/errorBus';
import { normalizeToMarkdown } from '../../utils/notesNormalize.js';

const QuickNotesCardEnhanced = ({ isDarkTheme, user }) => {
  const [content, setContent] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState(null);
  const [note, setNote] = useState(null);
  const [lastSaved, setLastSaved] = useState(null);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [fontSize, setFontSize] = useState('text-sm');
  const [textColor, setTextColor] = useState('default');
  const [showFontControls, setShowFontControls] = useState(true);
  const textareaRef = useRef(null);
  const containerRef = useRef(null);

  // Font size and color options
  const fontSizeOptions = [
    { value: 'text-xs', label: 'XS' },
    { value: 'text-sm', label: 'S' },
    { value: 'text-base', label: 'M' },
    { value: 'text-lg', label: 'L' },
    { value: 'text-xl', label: 'XL' }
  ];

  const textColorOptions = [
    { value: 'default', label: 'Default', colorClass: isDarkTheme ? 'text-white' : 'text-gray-900' },
    { value: 'red', label: 'Red', colorClass: 'text-red-500' },
    { value: 'blue', label: 'Blue', colorClass: 'text-blue-500' },
    { value: 'green', label: 'Green', colorClass: 'text-green-500' },
    { value: 'purple', label: 'Purple', colorClass: 'text-purple-500' },
    { value: 'orange', label: 'Orange', colorClass: 'text-orange-500' }
  ];

  // Close font controls when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (containerRef.current && !containerRef.current.contains(event.target)) {
        setShowFontControls(false);
      }
    };

    if (showFontControls) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showFontControls]);

  // Expand/collapse functionality
  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
    
    if (!isExpanded) {
      // Entering expanded mode
      if (containerRef.current) {
        containerRef.current.style.position = 'fixed';
        containerRef.current.style.top = '20px';
        containerRef.current.style.left = '20px';
        containerRef.current.style.right = '20px';
        containerRef.current.style.bottom = '20px';
        containerRef.current.style.zIndex = '50';
        containerRef.current.style.maxHeight = 'calc(100vh - 40px)';
      }
    } else {
      // Exiting expanded mode
      if (containerRef.current) {
        containerRef.current.style.position = '';
        containerRef.current.style.top = '';
        containerRef.current.style.left = '';
        containerRef.current.style.right = '';
        containerRef.current.style.bottom = '';
        containerRef.current.style.zIndex = '';
        containerRef.current.style.maxHeight = '';
      }
    }
  };

  // Force save function
  const forceSave = async () => {
    if (!note?.id) return;
    await saveNotes(content);
  };

  // Simple markdown formatting functions
  const applyMarkdownFormat = (prefix, suffix = '') => {
    if (!textareaRef.current) return;
    
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = content.slice(start, end);
    
    let newText;
    if (selectedText) {
      // Wrap selected text
      newText = content.slice(0, start) + prefix + selectedText + suffix + content.slice(end);
    } else {
      // Insert at cursor
      newText = content.slice(0, start) + prefix + suffix + content.slice(start);
    }
    
    setContent(newText);
    setHasUnsavedChanges(true);
    
    // Restore focus and set cursor position
    setTimeout(() => {
      textarea.focus();
      const newCursorPos = selectedText ? start + prefix.length + selectedText.length + suffix.length : start + prefix.length;
      textarea.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };

  // MS Word-style font formatting - only affects selected text
  const applyFontSize = (size) => {
    if (!textareaRef.current) return;
    
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    
    if (start === end) {
      // No selection, just show message or return
      return;
    }
    
    const selectedText = content.slice(start, end);
    const sizeMap = {
      'text-xs': 'x-small',
      'text-sm': 'small', 
      'text-base': 'medium',
      'text-lg': 'large',
      'text-xl': 'x-large'
    };
    
    // Wrap selected text with size styling
    const wrappedText = `<span style="font-size: ${sizeMap[size] || 'medium'};">${selectedText}</span>`;
    const newText = content.slice(0, start) + wrappedText + content.slice(end);
    
    setContent(newText);
    setHasUnsavedChanges(true);
    
    // Restore focus and selection
    setTimeout(() => {
      textarea.focus();
      const newEnd = start + wrappedText.length;
      textarea.setSelectionRange(start, newEnd);
    }, 0);
  };

  // MS Word-style color formatting - only affects selected text  
  const applyTextColor = (color) => {
    if (!textareaRef.current) return;
    
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    
    if (start === end) {
      // No selection, just return
      return;
    }
    
    const selectedText = content.slice(start, end);
    const colorMap = {
      'red': '#ef4444',
      'blue': '#3b82f6', 
      'green': '#10b981',
      'purple': '#8b5cf6',
      'orange': '#f97316'
    };
    
    if (color === 'default') {
      // Remove color styling from selection
      const cleanText = selectedText.replace(/<span[^>]*style="[^"]*color:[^;"]*;?[^"]*"[^>]*>(.*?)<\/span>/g, '$1');
      const newText = content.slice(0, start) + cleanText + content.slice(end);
      setContent(newText);
    } else {
      // Apply color to selected text
      const wrappedText = `<span style="color: ${colorMap[color]};">${selectedText}</span>`;
      const newText = content.slice(0, start) + wrappedText + content.slice(end);
      setContent(newText);
    }
    
    setHasUnsavedChanges(true);
    
    // Restore focus and selection
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start, end);
    }, 0);
  };

  // Render markdown for preview
  const renderMarkdown = (text) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/~~(.*?)~~/g, '<del>$1</del>')
      .replace(/`(.*?)`/g, '<code style="background-color: #f1f5f9; padding: 2px 4px; border-radius: 3px; font-family: monospace;">$1</code>')
      .replace(/^### (.*$)/gim, '<h3 style="font-size: 1.125rem; font-weight: 600; margin: 1rem 0 0.5rem 0;">$1</h3>')
      .replace(/^## (.*$)/gim, '<h2 style="font-size: 1.25rem; font-weight: 600; margin: 1rem 0 0.5rem 0;">$1</h2>')
      .replace(/^# (.*$)/gim, '<h1 style="font-size: 1.5rem; font-weight: 700; margin: 1rem 0 0.5rem 0;">$1</h1>')
      .replace(/^\- (.*$)/gim, '<li style="margin-left: 1rem; list-style-type: disc;">$1</li>')
      .replace(/^\d+\. (.*$)/gim, '<li style="margin-left: 1rem; list-style-type: decimal;">$1</li>')
      .replace(/\n/g, '<br>');
  };

  // Helper function to format time
  function formatTime(d) {
    try {
      return new Intl.DateTimeFormat(undefined, {
        hour: "2-digit", 
        minute: "2-digit"
      }).format(d);
    } catch { 
      return ""; 
    }
  }

  // Debounced autosave every 1s
  useEffect(() => {
    if (!loaded || !note?.id) return; // skip initial load and if no note
    
    const handle = setTimeout(async () => {
      const payload = normalizeToMarkdown(content);
      setIsSaving(true);
      try {
        const now = new Date().toISOString();
        const { error } = await supabase
          .from("my_desk_notes")
          .update({ 
            content: payload, 
            last_activity: now,
            updated_at: now
          })
          .eq("id", note.id);
        
        setIsSaving(false);
        if (!error) {
          setLastSaved(new Date());
          setHasUnsavedChanges(false);
          setNote(prev => ({ ...prev, content: payload }));
        } else {
          errorBus.pushError({ source: "quick-notes", message: error.message });
        }
      } catch (err) {
        setIsSaving(false);
        errorBus.pushError({ source: "quick-notes", message: err.message });
      }
    }, 1000); // 1s

    return () => clearTimeout(handle);
  }, [content, loaded, note?.id]);

  useEffect(() => {
    if (user?.id) {
      loadNote();
    }
  }, [user?.id]);

  const loadNote = async () => {
    try {
      setLoading(true);
      setError(null);

      // Try to find existing note (just get the first one for this user)
      const { data: existingNotes, error: fetchError } = await supabase
        .from('my_desk_notes')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(1);

      if (fetchError) throw fetchError;

      if (existingNotes && existingNotes.length > 0) {
        const existingNote = existingNotes[0];
        setNote(existingNote);
        // Normalize content on load to ensure clean text
        const normalizedContent = normalizeToMarkdown(existingNote.content || '');
        setContent(normalizedContent);
        if (existingNote.last_activity) {
          setLastSaved(new Date(existingNote.last_activity));
        }
      } else {
        // Create new note
        const { data: newNote, error: createError } = await supabase
          .from('my_desk_notes')
          .insert([{
            user_id: user.id,
            content: ''
          }])
          .select()
          .single();

        if (createError) throw createError;

        setNote(newNote);
        setContent('');
      }
      
      setLoaded(true); // Mark as loaded after initial fetch
    } catch (err) {
      setError(err.message);
      errorBus.pushError({ source: 'Quick Notes Load', message: err.message });
    } finally {
      setLoading(false);
    }
  };

  const saveNotes = async (newContent) => {
    if (!note?.id) return;
    
    setIsSaving(true);
    try {
      const now = new Date().toISOString();
      const normalizedContent = normalizeToMarkdown(newContent);
      
      const { error: updateError } = await supabase
        .from('my_desk_notes')
        .update({
          content: normalizedContent,
          last_activity: now,
          updated_at: now
        })
        .eq('id', note.id);

      if (updateError) throw updateError;

      setLastSaved(new Date(now));
      setHasUnsavedChanges(false);
      // Update the local note state to reflect the saved content
      setNote(prev => ({ ...prev, content: normalizedContent }));
    } catch (error) {
      console.error('Error saving notes:', error);
      errorBus.pushError({ source: 'Quick Notes Save', message: error.message });
    }
    setIsSaving(false);
  };

  const handleContentChange = (newContent) => {
    setContent(newContent);
    setHasUnsavedChanges(true);
  };

  const handleManualSave = () => {
    saveNotes(content);
  };

  // Handle textarea blur for immediate save
  const handleTextareaBlur = async () => {
    if (!note?.id || !hasUnsavedChanges) return;
    await saveNotes(content);
  };

  if (loading) {
    return (
      <div style={{ backgroundColor: isDarkTheme ? '#424250' : '#f3f4fd' }} className="rounded-xl shadow-lg overflow-hidden min-h-[260px]">
        <div className="p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center gap-2">
            <StickyNote className="w-5 h-5 text-yellow-500" />
            <h3 className={`font-semibold ${isDarkTheme ? 'text-white' : 'text-gray-900'}`}>
              Quick Notes
            </h3>
          </div>
        </div>
        <div className="p-4">
          <div className="animate-pulse space-y-2">
            <div style={{ backgroundColor: isDarkTheme ? '#8a87d6' : '#ffffff' }} className="h-4 rounded w-3/4"></div>
            <div style={{ backgroundColor: isDarkTheme ? '#8a87d6' : '#ffffff' }} className="h-4 rounded w-1/2"></div>
            <div style={{ backgroundColor: isDarkTheme ? '#8a87d6' : '#ffffff' }} className="h-4 rounded w-2/3"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ backgroundColor: isDarkTheme ? '#424250' : '#f3f4fd' }} className="rounded-xl shadow-lg p-6 min-h-[260px]">
        <div className="flex items-center gap-2 mb-4">
          <StickyNote className="w-5 h-5 text-yellow-500" />
          <h3 className={`font-semibold ${isDarkTheme ? 'text-white' : 'text-gray-900'}`}>
            Quick Notes
          </h3>
        </div>
        <div className={`p-3 rounded border ${isDarkTheme ? 'bg-red-900/20 border-red-800 text-red-200' : 'bg-red-50 border-red-300 text-red-800'}`}>
          <p className="text-sm">{error}</p>
          <button
            onClick={loadNote}
            className={`mt-2 text-sm underline ${isDarkTheme ? 'text-red-300 hover:text-red-100' : 'text-red-600 hover:text-red-800'}`}
          >
            Try again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div 
      ref={containerRef}
      style={{ backgroundColor: isDarkTheme ? '#424250' : '#f3f4fd' }}
      className={`rounded-xl shadow-lg overflow-hidden ${
        isExpanded ? 'h-full' : 'min-h-[300px]'
      }`}
    >
      {/* Header */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <StickyNote className="w-5 h-5 text-yellow-500" />
            <h3 className={`font-semibold ${isDarkTheme ? 'text-white' : 'text-gray-900'}`}>Quick Notes</h3>
          </div>
          <div className="flex items-center gap-2">
            {/* Preview Toggle */}
            <button
              onClick={() => setIsPreviewMode(!isPreviewMode)}
              className={`p-2 rounded-md transition-colors ${
                isPreviewMode
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300'
                  : isDarkTheme
                    ? 'text-slate-400 hover:text-slate-200 hover:style={{ backgroundColor: '#8a87d6' }}'
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-200'
              }`}
              title={isPreviewMode ? 'Edit Mode' : 'Preview Mode'}
            >
              {isPreviewMode ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            </button>

            {/* Force Save Button */}
            <button
              onClick={forceSave}
              disabled={!note?.id || isSaving}
              className={`p-2 rounded-md transition-colors ${
                note?.id && !isSaving
                  ? isDarkTheme
                    ? 'text-slate-400 hover:text-slate-200 hover:style={{ backgroundColor: '#8a87d6' }}'
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-200'
                  : 'text-gray-400 cursor-not-allowed'
              }`}
              title="Force Save"
            >
              <Save className="w-4 h-4" />
            </button>

            {/* Expand Toggle */}
            <button
              onClick={toggleExpand}
              className={`p-2 rounded-md transition-colors ${isDarkTheme 
                ? 'text-slate-400 hover:text-slate-200 hover:style={{ backgroundColor: '#8a87d6' }}' 
                : 'text-gray-600 hover:text-gray-800 hover:bg-gray-200'
              }`}
              title={isExpanded ? 'Collapse' : 'Expand'}
            >
              {isExpanded ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
            </button>
            
            {note?.id && hasUnsavedChanges && (
              <button
                onClick={handleManualSave}
                className="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Save
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Markdown Toolbar - only show in edit mode */}
      {!isPreviewMode && (
        <div className={`px-4 py-2 border-b ${isDarkTheme ? 'border-slate-700' : 'border-gray-200'}`}>
          <div className="flex items-center gap-1 flex-wrap">
            {/* Markdown Formatting */}
            <button
              onClick={() => applyMarkdownFormat('**', '**')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Bold"
            >
              <Bold className="w-4 h-4" />
            </button>
            <button
              onClick={() => applyMarkdownFormat('*', '*')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Italic"
            >
              <Italic className="w-4 h-4" />
            </button>
            <button
              onClick={() => applyMarkdownFormat('~~', '~~')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Strikethrough"
            >
              <Strikethrough className="w-4 h-4" />
            </button>
            <button
              onClick={() => applyMarkdownFormat('`', '`')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Code"
            >
              <Code className="w-4 h-4" />
            </button>
            
            <div 
              className="w-px h-6" 
              style={{ backgroundColor: isDarkTheme ? '#8a87d6' : '#e3e3f5' }}
            ></div>
            
            <button
              onClick={() => applyMarkdownFormat('# ')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Heading"
            >
              <Heading className="w-4 h-4" />
            </button>
            <button
              onClick={() => applyMarkdownFormat('- ')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Bullet List"
            >
              <List className="w-4 h-4" />
            </button>
            <button
              onClick={() => applyMarkdownFormat('1. ')}
              className={`p-1.5 rounded ${isDarkTheme ? 'text-slate-300 hover:text-white' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
              style={{ backgroundColor: 'transparent' }}
              onMouseEnter={(e) => e.target.style.backgroundColor = isDarkTheme ? '#8a87d6' : '#e3e3f5'}
              onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              title="Numbered List"
            >
              <ListOrdered className="w-4 h-4" />
            </button>

            <div 
              className="w-px h-6" 
              style={{ backgroundColor: isDarkTheme ? '#8a87d6' : '#e3e3f5' }}
            ></div>

            {/* Font Controls - Inline */}
            <button
              onClick={() => setShowFontControls(!showFontControls)}
              className={`p-1.5 rounded transition-colors ${
                showFontControls
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300'
                  : isDarkTheme
                    ? 'text-slate-300 hover:style={{ backgroundColor: '#8a87d6' }}'
                    : 'text-gray-600 hover:bg-gray-200'
              }`}
              title="Toggle Font Controls"
            >
              <Type className="w-4 h-4" />
            </button>

            {showFontControls && (
              <>
                {/* Font Size Dropdown */}
                <select
                  onChange={(e) => applyFontSize(e.target.value)}
                  className={`text-xs px-2 py-1 rounded border ${
                    isDarkTheme
                      ? 'style={{ backgroundColor: '#8a87d6' }} border-slate-600 text-slate-300'
                      : 'style={{ backgroundColor: '#f3f4fd' }} border-gray-300 text-gray-700'
                  }`}
                  defaultValue=""
                >
                  <option value="" disabled>Size</option>
                  {fontSizeOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>

                {/* Color Buttons */}
                <div className="flex gap-1">
                  {textColorOptions.map((option) => (
                    <button
                      key={option.value}
                      onClick={() => applyTextColor(option.value)}
                      className={`w-6 h-6 rounded border transition-colors flex items-center justify-center ${
                        option.value === 'default'
                          ? isDarkTheme 
                            ? 'border-slate-500 style={{ backgroundColor: '#8a87d6' }}' 
                            : 'border-gray-400 style={{ backgroundColor: '#ffffff' }}'
                          : 'border-gray-300'
                      } hover:scale-105 ${option.colorClass}`}
                      title={`${option.label} (select text first)`}
                    >
                      {option.value === 'default' ? (
                        <span className="text-xs font-bold">A</span>
                      ) : (
                        <Palette className="w-3 h-3" />
                      )}
                    </button>
                  ))}
                </div>
              </>
            )}
          </div>
        </div>
      )}

      {/* Content Area */}
      <div className={`p-4 flex flex-col ${isExpanded ? 'h-full' : 'h-[250px]'}`}>
        {isPreviewMode ? (
          /* Preview Mode */
          <div
            className={`flex-1 p-3 border rounded-md overflow-y-auto prose prose-sm max-w-none scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 dark:scrollbar-thumb-slate-600 dark:scrollbar-track-slate-800 ${
              isDarkTheme ? 'prose-invert border-slate-600' : 'border-gray-300'
            }`}
            dangerouslySetInnerHTML={{
              __html: content ? renderMarkdown(content) : `<p class="${isDarkTheme ? 'text-slate-400' : 'text-gray-500'}">No content yet. Switch to edit mode to start writing.</p>`
            }}
          />
        ) : (
          /* Edit Mode */
          <textarea
            ref={textareaRef}
            value={content}
            onChange={(e) => handleContentChange(e.target.value)}
            onBlur={handleTextareaBlur}
            className={`w-full flex-1 p-3 text-sm border rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 whitespace-pre-wrap font-mono overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 dark:scrollbar-thumb-slate-600 dark:scrollbar-track-slate-800 ${
              isDarkTheme
                ? 'style={{ backgroundColor: '#8a87d6' }} text-white border-slate-600 placeholder-slate-400'
                : 'style={{ backgroundColor: '#f3f4fd' }} text-gray-900 border-gray-300 placeholder-gray-500'
            }`}
            style={{ 
              whiteSpace: 'pre-wrap',
              overflowWrap: 'break-word',
              fontFamily: 'ui-monospace, SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace'
            }}
            placeholder="Start typing your notes here..."
          />
        )}

        {/* Footer with save status */}
        <div className="mt-2 flex justify-end">
          {note?.id && (
            <div className={`text-xs ${isDarkTheme ? 'text-slate-400' : 'text-gray-500'}`}>
              {isSaving ? (
                <span className="text-blue-600">Saving...</span>
              ) : lastSaved ? (
                <span>Saved {formatTime(lastSaved)}</span>
              ) : null}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuickNotesCardEnhanced;

