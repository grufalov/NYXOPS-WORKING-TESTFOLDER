import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { formatDateDisplay } from './formatDate.js';

/**
 * Advisory Issues Export Utilities
 * Handles PDF, CSV, and HTML export generation for Advisory Issues v1.5
 */

/**
 * Export advisory issues to PDF format
 * @param {Array} advisoryIssues - Array of advisory issue objects
 * @param {Object} user - Current user object
 * @param {Object} options - Export options
 */
export const exportAdvisoryToPDF = (advisoryIssues, user, options = {}) => {
  const {
    includeNotes = false,
    redactPII = false,
    title = 'Advisory Issues Report'
  } = options;

  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Header with NyxOps branding
  doc.setFontSize(18);
  doc.setTextColor(99, 102, 241); // Purple theme
  doc.text(title, 20, 20);
  
  doc.setFontSize(10);
  doc.setTextColor(0, 0, 0);
  doc.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, 20, 30);
  doc.text(`User: ${redactPII ? '[REDACTED]' : (user.user_metadata?.full_name || user.email)}`, 20, 35);
  doc.text(`Total Issues: ${advisoryIssues.length}`, 20, 40);
  
  // Summary statistics
  const openIssues = advisoryIssues.filter(issue => issue.status === 'open' || !['closed', 'escalated'].includes(issue.status));
  const closedIssues = advisoryIssues.filter(issue => issue.status === 'closed' || issue.status === 'escalated');
  const promotedIssues = advisoryIssues.filter(issue => issue.promoted);
  
  doc.text(`Open: ${openIssues.length} | Closed: ${closedIssues.length} | Promoted: ${promotedIssues.length}`, 20, 45);
  
  // Main table data
  const tableData = advisoryIssues.map(issue => {
    const simplifiedStatus = ['open', 'monitoring', 'ready_to_escalate'].includes(issue.status) ? 'Open' : 'Closed';
    const owner = redactPII ? '[REDACTED]' : (issue.owner || issue.business_stakeholder || '-');
    const ageInDays = issue.age_in_days || Math.floor((new Date() - new Date(issue.created_at)) / (1000 * 60 * 60 * 24));
    
    return [
      issue.title?.substring(0, 40) + (issue.title?.length > 40 ? '...' : ''),
      simplifiedStatus,
      owner.substring(0, 15) + (owner.length > 15 ? '...' : ''),
      (issue.description || issue.background || '').substring(0, 60) + ((issue.description || issue.background || '').length > 60 ? '...' : ''),
      `${ageInDays}d`,
      formatDateDisplay(issue.created_at)
    ];
  });
  
  // AutoTable for formatted output
  doc.autoTable({
    head: [['Title', 'Status', 'Owner', 'Description', 'Age', 'Created']],
    body: tableData,
    startY: 55,
    theme: 'grid',
    styles: { 
      fontSize: 8,
      cellPadding: 3,
      overflow: 'linebreak'
    },
    headStyles: { 
      fillColor: [99, 102, 241],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    columnStyles: {
      0: { cellWidth: 35 }, // Title
      1: { cellWidth: 20 }, // Status
      2: { cellWidth: 25 }, // Owner
      3: { cellWidth: 50 }, // Description
      4: { cellWidth: 15 }, // Age
      5: { cellWidth: 25 }  // Created
    },
    margin: { top: 20, left: 20, right: 20 }
  });
  
  // Add notes section if requested
  if (includeNotes && advisoryIssues.some(issue => issue.advisory_issue_notes?.length > 0)) {
    let currentY = doc.lastAutoTable.finalY + 20;
    
    doc.setFontSize(14);
    doc.setTextColor(99, 102, 241);
    doc.text('Timeline Notes', 20, currentY);
    currentY += 10;
    
    advisoryIssues.forEach(issue => {
      if (issue.advisory_issue_notes?.length > 0) {
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        doc.text(`${issue.title}:`, 20, currentY);
        currentY += 5;
        
        issue.advisory_issue_notes.forEach(note => {
          const noteText = `â€¢ ${formatDateDisplay(note.created_at)} - ${redactPII ? '[REDACTED]' : note.user_name}: ${note.content}`;
          const splitText = doc.splitTextToSize(noteText, pageWidth - 40);
          doc.text(splitText, 25, currentY);
          currentY += splitText.length * 4;
          
          if (currentY > 270) {
            doc.addPage();
            currentY = 20;
          }
        });
        currentY += 5;
      }
    });
  }
  
  // Footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - 30, 285);
    doc.text('Generated by NyxOps Cases & Project Tracker', 20, 285);
  }
  
  // Save the PDF
  const filename = `advisory_issues_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(filename);
  
  return filename;
};

/**
 * Export advisory issues to CSV format
 * @param {Array} advisoryIssues - Array of advisory issue objects
 * @param {Object} options - Export options
 */
export const exportAdvisoryToCSV = (advisoryIssues, options = {}) => {
  const { redactPII = false, includeNotes = false } = options;
  
  // CSV headers
  const headers = [
    'Title',
    'Status',
    'Owner',
    'Description',
    'Age (Days)',
    'Created Date',
    'Last Activity',
    'Promoted',
    'Promoted Date'
  ];
  
  if (includeNotes) {
    headers.push('Notes Count', 'Latest Note');
  }
  
  // CSV rows
  const rows = advisoryIssues.map(issue => {
    const simplifiedStatus = ['open', 'monitoring', 'ready_to_escalate'].includes(issue.status) ? 'Open' : 'Closed';
    const owner = redactPII ? '[REDACTED]' : (issue.owner || issue.business_stakeholder || '');
    const ageInDays = issue.age_in_days || Math.floor((new Date() - new Date(issue.created_at)) / (1000 * 60 * 60 * 24));
    
    const row = [
      escapeCSV(issue.title || ''),
      simplifiedStatus,
      escapeCSV(owner),
      escapeCSV(issue.description || issue.background || ''),
      ageInDays,
      formatDateDisplay(issue.created_at),
      formatDateDisplay(issue.last_activity_date || issue.updated_at),
      issue.promoted ? 'Yes' : 'No',
      issue.promoted_at ? formatDateDisplay(issue.promoted_at) : ''
    ];
    
    if (includeNotes) {
      const notesCount = issue.advisory_issue_notes?.length || 0;
      const latestNote = issue.advisory_issue_notes?.[0]?.content || '';
      row.push(notesCount, escapeCSV(latestNote));
    }
    
    return row;
  });
  
  // Combine headers and rows
  const csvContent = [headers, ...rows]
    .map(row => row.join(','))
    .join('\n');
  
  // Download CSV
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `advisory_issues_${new Date().toISOString().split('T')[0]}.csv`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  return a.download;
};

/**
 * Export advisory issues to HTML format
 * @param {Array} advisoryIssues - Array of advisory issue objects
 * @param {Object} user - Current user object
 * @param {Object} options - Export options
 */
export const exportAdvisoryToHTML = (advisoryIssues, user, options = {}) => {
  const { 
    redactPII = false, 
    includeNotes = false,
    title = 'Advisory Issues Report'
  } = options;
  
  const openIssues = advisoryIssues.filter(issue => 
    ['open', 'monitoring', 'ready_to_escalate'].includes(issue.status)
  );
  const closedIssues = advisoryIssues.filter(issue => 
    ['closed', 'escalated'].includes(issue.status)
  );
  
  const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f8fafc;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 8px;
            margin-bottom: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0 0 10px 0;
            font-size: 2em;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }
        table {
            width: 100%;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        th {
            background: #667eea;
            color: white;
            font-weight: 600;
        }
        tr:hover {
            background: #f7fafc;
        }
        .status-open {
            color: #059669;
            font-weight: 600;
        }
        .status-closed {
            color: #6b7280;
            font-weight: 600;
        }
        .promoted {
            background: #dcfce7;
            color: #166534;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.75em;
            font-weight: 600;
        }
        .footer {
            text-align: center;
            color: #6b7280;
            font-size: 0.9em;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
        }
        .notes-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .note {
            padding: 10px;
            border-left: 4px solid #667eea;
            margin: 10px 0;
            background: #f8fafc;
        }
        @media print {
            body { background: white; }
            .header { background: #667eea !important; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated: ${new Date().toLocaleString()}</p>
        <p>User: ${redactPII ? '[REDACTED]' : (user.user_metadata?.full_name || user.email)}</p>
    </div>
    
    <div class="stats">
        <div class="stat-card">
            <div class="stat-number">${advisoryIssues.length}</div>
            <div>Total Issues</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${openIssues.length}</div>
            <div>Open Issues</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${closedIssues.length}</div>
            <div>Closed Issues</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${advisoryIssues.filter(i => i.promoted).length}</div>
            <div>Promoted to Cases</div>
        </div>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Status</th>
                <th>Owner</th>
                <th>Description</th>
                <th>Age</th>
                <th>Created</th>
                ${includeNotes ? '<th>Notes</th>' : ''}
            </tr>
        </thead>
        <tbody>
            ${advisoryIssues.map(issue => {
              const simplifiedStatus = ['open', 'monitoring', 'ready_to_escalate'].includes(issue.status) ? 'Open' : 'Closed';
              const owner = redactPII ? '[REDACTED]' : (issue.owner || issue.business_stakeholder || '-');
              const ageInDays = issue.age_in_days || Math.floor((new Date() - new Date(issue.created_at)) / (1000 * 60 * 60 * 24));
              
              return `
                <tr>
                    <td>
                        ${escapeHtml(issue.title || '')}
                        ${issue.promoted ? '<span class="promoted">PROMOTED</span>' : ''}
                    </td>
                    <td class="status-${simplifiedStatus.toLowerCase()}">${simplifiedStatus}</td>
                    <td>${escapeHtml(owner)}</td>
                    <td>${escapeHtml((issue.description || issue.background || '').substring(0, 100))}${(issue.description || issue.background || '').length > 100 ? '...' : ''}</td>
                    <td>${ageInDays} days</td>
                    <td>${formatDateDisplay(issue.created_at)}</td>
                    ${includeNotes ? `<td>${issue.advisory_issue_notes?.length || 0}</td>` : ''}
                </tr>
              `;
            }).join('')}
        </tbody>
    </table>
    
    ${includeNotes && advisoryIssues.some(issue => issue.advisory_issue_notes?.length > 0) ? `
    <div class="notes-section">
        <h2>Timeline Notes</h2>
        ${advisoryIssues.filter(issue => issue.advisory_issue_notes?.length > 0).map(issue => `
            <h3>${escapeHtml(issue.title)}</h3>
            ${issue.advisory_issue_notes.map(note => `
                <div class="note">
                    <strong>${formatDateDisplay(note.created_at)} - ${redactPII ? '[REDACTED]' : escapeHtml(note.user_name)}</strong><br>
                    ${escapeHtml(note.content)}
                </div>
            `).join('')}
        `).join('')}
    </div>
    ` : ''}
    
    <div class="footer">
        <p>Generated by NyxOps Cases & Project Tracker</p>
        <p>This report contains ${advisoryIssues.length} advisory issues as of ${new Date().toLocaleString()}</p>
    </div>
</body>
</html>`;

  // Download HTML
  const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `advisory_issues_${new Date().toISOString().split('T')[0]}.html`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  return a.download;
};

/**
 * Utility function to escape CSV values
 * @param {string} value - Value to escape
 * @returns {string} - Escaped value
 */
const escapeCSV = (value) => {
  if (!value) return '';
  const stringValue = String(value);
  if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
    return `"${stringValue.replace(/"/g, '""')}"`;
  }
  return stringValue;
};

/**
 * Utility function to escape HTML values
 * @param {string} value - Value to escape
 * @returns {string} - Escaped value
 */
const escapeHtml = (value) => {
  if (!value) return '';
  return String(value)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
};

/**
 * Export advisory issues in specified format
 * @param {Array} advisoryIssues - Array of advisory issue objects
 * @param {string} format - Export format: 'pdf', 'csv', or 'html'
 * @param {Object} user - Current user object
 * @param {Object} options - Export options
 */
export const exportAdvisoryIssues = (advisoryIssues, format, user, options = {}) => {
  switch (format.toLowerCase()) {
    case 'pdf':
      return exportAdvisoryToPDF(advisoryIssues, user, options);
    case 'csv':
      return exportAdvisoryToCSV(advisoryIssues, options);
    case 'html':
      return exportAdvisoryToHTML(advisoryIssues, user, options);
    default:
      throw new Error(`Unsupported export format: ${format}`);
  }
};
